{"version":3,"sources":["chat.js","App.js","serviceWorker.js","index.js"],"names":["client","ApiAiClient","accessToken","sendMessage","text","sender","type","payload","initState","store","createStore","state","action","applyMiddleware","next","textRequest","then","response","fulfillment","result","speech","App","this","props","feed","filteredFeed","length","shift","id","src","map","entry","class","tabIndex","onKeyDown","e","keyCode","target","value","Component","connect","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"oQAMMA,EAAS,IAAIC,IAAY,CAACC,YADZ,qCAMPC,EAAc,SAACC,GAAD,IAAOC,EAAP,uDAAc,OAAd,MAA0B,CACnDC,KAJc,UAKdC,QAAS,CAAEH,OAAMC,YAiBbG,EAAY,CAAC,CAAEJ,KAAM,uDAadK,EAAQC,aAXE,WAAgC,IAA/BC,EAA8B,uDAAtBH,EAAWI,EAAW,uCACpD,OAAQA,EAAON,MAEb,IA3BY,UA4BV,MAAM,GAAN,mBAAYK,GAAZ,CAAmBC,EAAOL,UAE5B,QACE,OAAOI,KAIoCE,aA3BvB,kBAAM,SAAAC,GAAI,OAAI,SAAAF,GAEtC,GADAE,EAAKF,GATS,YAUVA,EAAON,KAAkB,CAAC,IACpBF,EAASQ,EAAOL,QAAhBH,KAERJ,EAAOe,YAAYX,GAChBY,MACD,SAAmBC,GAAW,IACVC,EAAiBD,EAA3BE,OAAUD,YAClBJ,EAAKX,EAAYe,EAAYE,OAAQ,kB,QCpBvCC,G,uLACM,IAAD,EACqBC,KAAKC,MAA1BC,EADA,EACAA,KAAMrB,EADN,EACMA,YACTsB,EAAeD,EAInB,OAHIA,EAAKE,OAAS,GAChBD,EAAaE,QAGb,yBAAKC,GAAG,gBACN,yBAAKA,GAAG,WACN,4CACA,2FACA,yBAAKA,GAAI,WAAWC,IAAI,gEACxB,wBAAID,GAAG,aACLH,EAAaK,KAAI,SAAAC,GAAK,OAAI,oCAAE,wBAAIC,MAAM,aAAcD,EAAM3B,MAAU,kCAEtE,2BACE6B,SAAS,IACTC,UAAW,SAACC,GAAD,OAAqB,KAAdA,EAAEC,SACpBD,EAAEE,OAAOC,MAASnC,EAAYgC,EAAEE,OAAOC,OAAS,c,GAnB1CC,cAgCHC,eAJS,SAAC7B,GAAD,MAAY,CAClCa,KAAMb,KAGgC,CACtCR,eADaqC,CAEZnB,GC3BiBoB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OAAO,kBAAC,IAAD,CAAUtC,MAAOA,GAAO,kBAAC,EAAD,OAAoBuC,SAASC,eAAe,SDyH9E,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMpC,MAAK,SAAAqC,GACjCA,EAAaC,kB","file":"static/js/main.56e3f9b4.chunk.js","sourcesContent":["// This is a library that helps us to make api calls super easily\r\nimport {ApiAiClient} from 'api-ai-javascript';\r\nimport {createStore, applyMiddleware, compose} from 'redux';\r\n\r\n// This token is coming from firebase\r\nconst accessToken = '0b6340941f9f4a998d02fd4026f09d2f';\r\nconst client = new ApiAiClient({accessToken})\r\n\r\nconst MESSAGE = 'MESSAGE';\r\n\r\n// Action to send a message. The function takes text as an argument\r\nexport const sendMessage = (text, sender='user') => ({\r\n  type: MESSAGE,\r\n  payload: { text, sender }\r\n})\r\n\r\nconst messageMiddleware = () => next => action => {\r\n  next(action);\r\n  if (action.type === MESSAGE) {\r\n    const { text } = action.payload;\r\n\r\n    client.textRequest(text)\r\n      .then(onSuccess)\r\n      function onSuccess(response) {\r\n        const { result: { fulfillment }} = response;\r\n        next(sendMessage(fulfillment.speech, 'bot'));\r\n      }\r\n  }\r\n}\r\n\r\nconst initState = [{ text: 'Hi! Im Ryan. What would you like to know about me?' }]\r\n\r\nconst messageReducer = (state = initState, action) => {\r\n  switch (action.type) {\r\n      \r\n    case MESSAGE:\r\n      return [ ...state, action.payload ];\r\n\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nexport const store = createStore(messageReducer, applyMiddleware(messageMiddleware));","import React, { Component } from 'react';\nimport {sendMessage} from './chat';\nimport {connect} from 'react-redux';\nimport './app.css';\n\nclass App extends Component {\n  render() {\n    const {feed, sendMessage} = this.props;\n    let filteredFeed = feed;\n    if (feed.length > 6) {\n      filteredFeed.shift();\n    }\n    return (\n      <div id=\"appContainer\">\n        <div id=\"chatBot\">\n          <h1>Hi! I'm Ryan</h1>\n          <h4>I created this chat bot share my skills. Ask me a question!</h4>\n          <img id =\"botImage\" src=\"https://avatars1.githubusercontent.com/u/44260224?s=460&v=4\"/>\n          <ul id=\"convoList\">\n          { filteredFeed.map(entry => <><li class=\"convoText\" >{entry.text}</li><br/></> )}\n          </ul>\n          <input \n            tabIndex=\"0\" \n            onKeyDown={(e)=> (e.keyCode === 13 && \n            e.target.value) ? sendMessage(e.target.value) : null \n          }/>\n        </div>\n      </div>\n\n    )\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  feed: state,\n})\n\nexport default connect(mapStateToProps, {\n  sendMessage\n})(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport {Provider} from 'react-redux';\nimport {store} from './chat';\nimport './index';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Provider store={store}><App /></Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}